{"version":3,"sources":["components/customButton/CustomButton.module.css","components/customCheckBox/CustomCheckbox.module.css","api/api.ts","components/customButton/CustomButton.tsx","components/customCheckBox/CustomCheckbox.tsx","components/customInput/CustomInputText.tsx","components/Test.tsx","App.tsx","reportWebVitals.ts","store/reducers/cards.ts","store/store.ts","index.tsx","components/customInput/CustomInputText.module.css"],"names":["module","exports","instance","axios","create","baseURL","process","withCredentials","authAPI","params","post","CustomButton","red","className","restProps","finalClassName","s","button","default","CustomCheckbox","type","onChange","onChangeChecked","children","spanClassName","finalInputClassName","checkbox","htmlFor","e","currentTarget","checked","CustomInputText","onChangeText","onKeyPress","onEnter","error","finalSpanClassName","input","errorInput","superInput","value","key","Test","style","textAlign","width","margin","placeholder","App","useEffect","email","password","rememberMe","then","res","console","log","data","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initState","reducers","combineReducers","cards","state","action","store","createStore","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.65733001.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"CustomButton_default__3mziG\",\"red\":\"CustomButton_red__LqAzu\",\"button\":\"CustomButton_button__1kKFn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"CustomCheckbox_checkbox__34nPX\",\"spanClassName\":\"CustomCheckbox_spanClassName__1DG_h\"};","import axios from 'axios';\n\nconst baseUrl = process.env.REACT_APP_BASE_URL; // Достаем базовый юрл из .env(ссылка на хироку)\n\nconst instance = axios.create({\n  baseURL: baseUrl /* \"http://localhost:7542/2.0/\" */,\n  withCredentials: true, // браузер разбирайся с куками сам\n});\n\n// api\n\nexport type LoginParamsType = {\n  email: string;\n  password: string;\n  rememberMe: boolean;\n};\n\nexport const authAPI = {\n  login(params: LoginParamsType) {\n    return instance.post<any>('auth/login', params);\n  },\n  logOut() {\n    return instance.delete<any>('auth/login');\n  },\n  me() {\n    return instance.post<any>('auth/me');\n  },\n  register(data: dataType) {\n    return instance.post<any>('auth/register', data);\n  },\n};\n\nexport type dataType = {\n  email: string;\n  password: string;\n};\n\n// types\n","import React, { ButtonHTMLAttributes, DetailedHTMLProps } from 'react';\n\nimport s from './CustomButton.module.css';\n\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\ntype DefaultButtonPropsType = DetailedHTMLProps<\n  ButtonHTMLAttributes<HTMLButtonElement>,\n  HTMLButtonElement\n>;\n\ntype SuperButtonPropsType = DefaultButtonPropsType & {\n  red?: boolean;\n};\n\nexport const CustomButton: React.FC<SuperButtonPropsType> = ({\n  red,\n  className,\n  ...restProps // все остальные пропсы попадут в объект restProps, там же будет children\n}) => {\n  const finalClassName = `${s.button} ${red ? s.red : s.default} ${className}`;\n\n  return (\n    <button\n      className={finalClassName}\n      {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\n    />\n  );\n};\n","// @typescript-eslint/no-unused-vars\nimport React, { ChangeEvent, DetailedHTMLProps, InputHTMLAttributes } from 'react';\n\nimport s from './CustomCheckbox.module.css';\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<\n  InputHTMLAttributes<HTMLInputElement>,\n  HTMLInputElement\n>;\n\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\n  onChangeChecked?: (checked: boolean) => void;\n  spanClassName?: string;\n};\n\nexport const CustomCheckbox: React.FC<SuperCheckboxPropsType> = ({\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n  onChange,\n  onChangeChecked,\n  className,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  spanClassName,\n  children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\n\n  ...restProps // все остальные пропсы попадут в объект restProps\n}) => {\n  const onChangeCallback = (e: ChangeEvent<HTMLInputElement>): void => {\n    if (onChange) {\n      onChange(e);\n    }\n    if (onChangeChecked) {\n      onChangeChecked(e.currentTarget.checked);\n    }\n  };\n\n  const finalInputClassName = `${s.checkbox} ${className || ''}`;\n\n  return (\n    <label htmlFor={finalInputClassName}>\n      <input\n        type=\"checkbox\"\n        onChange={onChangeCallback}\n        className={finalInputClassName}\n        {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\n      />\n      {children && <span className={s.spanClassName}>{children}</span>}\n    </label> // благодаря label нажатие на спан передастся в инпут\n  );\n};\n","import React, {\n  ChangeEvent,\n  DetailedHTMLProps,\n  InputHTMLAttributes,\n  KeyboardEvent,\n} from 'react';\n\nimport s from './CustomInputText.module.css';\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<\n  InputHTMLAttributes<HTMLInputElement>,\n  HTMLInputElement\n>;\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperInputTextPropsType = DefaultInputPropsType & {\n  // и + ещё пропсы которых нет в стандартном инпуте\n  onChangeText?: (value: string) => void;\n  onEnter?: () => void;\n  error?: string;\n  spanClassName?: string;\n};\n\nexport const CustomInputText: React.FC<SuperInputTextPropsType> = ({\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n  onChange,\n  onChangeText,\n  onKeyPress,\n  onEnter,\n  error,\n  className,\n  spanClassName,\n\n  ...restProps // все остальные пропсы попадут в объект restProps\n}) => {\n  const onChangeCallback = (e: ChangeEvent<HTMLInputElement>): void => {\n    if (onChange) {\n      onChange(e);\n    } // если есть пропс onChange\n    // то передать ему е (поскольку onChange не обязателен)\n    if (onChangeText) {\n      onChangeText(e.currentTarget.value);\n    }\n  };\n  const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>): void => {\n    if (onKeyPress) {\n      onKeyPress(e);\n    }\n\n    if (onEnter) {\n      // если есть пропс onEnter\n      if (e.key === 'Enter') {\n        // и если нажата кнопка Enter\n        onEnter();\n      }\n    } // то вызвать его\n  };\n\n  const finalSpanClassName = `${s.error} ${spanClassName || ''}`;\n  const finalInputClassName = `${s.input} ${\n    error ? s.errorInput : s.superInput\n  } ${className}`; // need to fix with (?:) and s.superInput\n\n  return (\n    <>\n      <input\n        type=\"text\"\n        onChange={onChangeCallback}\n        onKeyPress={onKeyPressCallback}\n        className={finalInputClassName}\n        {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n      />\n      {error && <span className={finalSpanClassName}>{error}</span>}\n    </>\n  );\n};\n","import React from 'react';\n\nimport { CustomButton, CustomCheckbox, CustomInputText } from 'components';\nimport { ReturnComponentType } from 'types';\n\nconst Test = (): ReturnComponentType => (\n  <div style={{ textAlign: 'center', width: '700px', margin: '50px' }}>\n    <CustomInputText placeholder=\"Enter smth?\" />\n\n    <CustomButton>Сделай мне больно</CustomButton>\n\n    <CustomCheckbox />\n  </div>\n);\n\nexport default Test;\n","import React, { useEffect } from 'react';\n\nimport './App.css';\nimport { Route, Routes } from 'react-router-dom';\n\nimport { authAPI } from './api/api';\nimport Test from './components/Test';\nimport { ReturnComponentType } from './types';\n\nconst App = (): ReturnComponentType => {\n  useEffect(() => {\n    /* authAPI.register({email:\"trololo@mail.ru\", password: \"12345678QWE\"})\n            .then((res) => {\n                console.log(res)\n            }) */\n\n    authAPI\n      .login({ email: 'trololo@mail.ru', password: '12345678QWE', rememberMe: false })\n      .then(res => {\n        console.log(res.data);\n      });\n\n    authAPI.me().then(res => {\n      console.log(res.data);\n    });\n  }, []);\n  return (\n    <div>\n      {/* <div>\n        <NavLink to={'/login'}>login</NavLink>---\n        <NavLink to={'/registration'}>registration</NavLink>---\n        <NavLink to={'/profile'}>profile</NavLink>---\n        <NavLink to={'/'}>Test page</NavLink>---\n        <NavLink to={'/recover'}>recover</NavLink>---\n        <NavLink to={'/404'}>404</NavLink>\n      </div>\n*/}\n      {/* why not */}\n      <Routes>\n        <Route\n          path=\"/login\"\n          element={\n            <div>\n              <h1>login</h1>\n            </div>\n          }\n        />\n        <Route\n          path=\"/registration\"\n          element={\n            <div>\n              <h1>registration</h1>\n            </div>\n          }\n        />\n        <Route\n          path=\"/profile\"\n          element={\n            <div>\n              <h1>profile</h1>\n            </div>\n          }\n        />\n        <Route\n          path={'/*'}\n          element={\n            <div style={{ textAlign: 'center' }}>\n              <h1>404:page NOT found</h1>\n            </div>\n          }\n        />\n        <Route\n          path=\"/recover\"\n          element={\n            <div>\n              <h1>recover password</h1>\n            </div>\n          }\n        />\n        <Route\n          path=\"/newPassword\"\n          element={\n            <div>\n              <h1>add new password</h1>\n            </div>\n          }\n        />\n        <Route path=\"/\" element={<Test />} />\n      </Routes>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initState = {};\n\ntype initStateType = {};\n\nexport const cardReducer = (\n  state: initStateType = initState,\n  action: any,\n): initStateType => {\n  switch (action.type) {\n    case '': {\n      return state;\n    }\n    default:\n      return state;\n  }\n};\n","import { combineReducers, createStore } from 'redux';\n\nimport { cardReducer } from 'store';\n\nconst reducers = combineReducers({\n  cards: cardReducer,\n});\nexport const store = createStore(reducers);\n\nexport type RootStoreType = ReturnType<typeof reducers>;\n\n// @ts-ignore\nwindow.store = store;\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"CustomInputText_superInput__1rT3h\",\"input\":\"CustomInputText_input__3cd74\",\"errorInput\":\"CustomInputText_errorInput__1Hzuo\",\"error\":\"CustomInputText_error__zMENZ\"};"],"sourceRoot":""}